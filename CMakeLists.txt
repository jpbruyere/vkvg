CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

PROJECT(vkvg VERSION 0.1.0 DESCRIPTION "Vulkan Vector Graphic")

INCLUDE(CheckSymbolExists)
INCLUDE(CheckIncludeFile)
INCLUDE(GNUInstallDirs)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
SET(CMAKE_CXX_FLAGS "-W -Wall -Wno-extra")
SET(CMAKE_EXE_LINKER_FLAGS "-lm")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	ADD_DEFINITIONS (-DDEBUG)
	OPTION(ENABLE_VALIDATION "enable vulkan validation layer" ON)
	OPTION(ENABLE_WIRED_FILL "enable wired polygon draw to check vertices and primitives" OFF)
ELSE()
	UNSET(ENABLE_VALIDATION CACHE)
	UNSET(ENABLE_WIRED_FILL CACHE)
ENDIF()

OPTION(VKVG_PREMULT_ALPHA "use premultiplied alpha for internal rendering" ON)
IF (VKVG_PREMULT_ALPHA)
	ADD_DEFINITIONS (-DVKVG_PREMULT_ALPHA)
ENDIF ()

OPTION(VKVG_TILING_OPTIMAL "use VK_IMAGE_TILING_OPTIMAL for surface backend texture" OFF)
IF (VKVG_TILING_OPTIMAL)
	ADD_DEFINITIONS (-DVKVG_TILING_OPTIMAL)
ENDIF ()

OPTION(VKVG_BUILD_TESTS "build tests with glfw" ON)

set(VULKAN_SDK "$ENV{VULKAN_SDK}" CACHE STRING "LunarG Vulkan SDK path")
if (VULKAN_SDK)
		set(ENV{VULKAN_SDK} ${VULKAN_SDK})
		SET(ENV{VK_LAYER_PATH} "${VULKAN_SDK}/etc/explicit_layer.d")
endif ()

if (NOT TARGET vkh_static)
	add_subdirectory (vkh)
endif()

#SET(ENABLE_VALIDATION OFF CACHE BOOL "Enable vulkan validation layer")

IF (ENABLE_VALIDATION)
	ADD_DEFINITIONS (-DVKVG_USE_VALIDATION)
ENDIF ()
IF (ENABLE_WIRED_FILL)
	ADD_DEFINITIONS (-DVKVG_WIRED_DEBUG)
ENDIF ()

#be aware that system libraries have priority on SDK in the finding.
FIND_PACKAGE(Vulkan REQUIRED)
FIND_PACKAGE(GLFW3)
FIND_PACKAGE(Freetype REQUIRED)
FIND_PACKAGE(FontConfig REQUIRED)
FIND_PACKAGE(HarfBuzz REQUIRED)

#Freetype lcd font filtering
#CHECK_SYMBOL_EXISTS (FT_CONFIG_OPTION_SUBPIXEL_RENDERING "${FREETYPE_INCLUDE_DIR_freetype2}/freetype/config/ftoption.h" FT_HAS_SUBPIXEL_RENDERING)
#IF (FT_HAS_SUBPIXEL_RENDERING)
	OPTION(VKVG_LCD_FONT_FILTER "enable freetype lcd font filtering" ON)
	IF (VKVG_LCD_FONT_FILTER)
		ADD_DEFINITIONS (-DVKVG_LCD_FONT_FILTER)
	ENDIF ()
#ENDIF()

# Find glslc shader compiler.
# On Android, the NDK includes the binary, so no external dependency.
if(ANDROID)
	file(GLOB glslc-folders ${ANDROID_NDK}/shader-tools/*)
else()
	file(GLOB glslc-folders ${VULKAN_SDK}/bin)
endif()
FIND_PROGRAM(GLSLC glslc HINTS ${glslc-folders})
FIND_PROGRAM(XXD xxd)

if(GLSLC AND XXD)

	SET(SHADERS_H "${CMAKE_CURRENT_SOURCE_DIR}/src/shaders.h")
	SET(SHADER_DIR "shaders")
	SET(SHADER_FILES ${SHADER_DIR}/*.frag ${SHADER_DIR}/*.vert ${SHADER_DIR}/*.geom  ${SHADER_DIR}/*.comp)
	FILE(GLOB_RECURSE SHADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${SHADER_FILES})
	FOREACH(SHADER ${SHADERS})
		SET(shader-input ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER})
		SET(shader-output ${CMAKE_CURRENT_BINARY_DIR}/${SHADER}.spv)
		ADD_CUSTOM_COMMAND (
		  OUTPUT ${shader-output}
		  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}"
		  COMMAND ${GLSLC} ${shader-input} -o ${shader-output}
		  COMMENT "Compiling ${shader-input}"
		  DEPENDS ${SHADER}
		  VERBATIM
		)
		SET(SHADER_OUTPUTS ${SHADER_OUTPUTS} ${shader-output})
	ENDFOREACH()

	ADD_CUSTOM_TARGET(BuildShaderHeader ALL DEPENDS ${SHADER_OUTPUTS})

	ADD_CUSTOM_COMMAND (TARGET BuildShaderHeader
		POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E remove ${SHADERS_H}
		VERBATIM
	)

	FOREACH(shad_spv ${SHADER_OUTPUTS})
		GET_FILENAME_COMPONENT(SPV ${shad_spv} NAME)
		ADD_CUSTOM_COMMAND (TARGET BuildShaderHeader
			POST_BUILD
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}
			COMMAND xxd -i ${SPV} >> ${SHADERS_H}
			DEPENDS ${SHADERS_H}
		)
	ENDFOREACH()
	SET_SOURCE_FILES_PROPERTIES(${SHADERS_H} PROPERTIES GENERATED 1)
	#add_definitions( -DDEBUG_VK_PERF=true )
endif()

FILE(GLOB VKVG_SRC src/*.c)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${VKVG_SRC} ${SHADERS})

if (BuildShaderHeader)
	add_dependencies(${PROJECT_NAME} BuildShaderHeader)
endif ()

SET_TARGET_PROPERTIES(vkvg PROPERTIES
	VERSION ${PROJECT_VERSION}
	SOVERSION 1
	PUBLIC_HEADER include/vkvg.h
)

TARGET_INCLUDE_DIRECTORIES(vkvg PRIVATE
	${Vulkan_INCLUDE_DIRS}
	${FREETYPE_INCLUDE_DIRS}
	${HARFBUZZ_INCLUDE_DIRS}
	${FONTCONFIG_INCLUDE_DIRS}
	${CMAKE_CURRENT_SOURCE_DIR}/include
	${CMAKE_CURRENT_SOURCE_DIR}/src
	${CMAKE_CURRENT_SOURCE_DIR}/vkh/include
	${CMAKE_CURRENT_SOURCE_DIR}/vkh/src
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
	${Vulkan_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
	vkh_static
)

CONFIGURE_FILE(vkvg.pc.in vkvg.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/vkvg.pc DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig)
INSTALL(TARGETS vkvg
	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
	PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

FUNCTION (buildtest TEST_NAME)
	ADD_EXECUTABLE(test_${TEST_NAME} "tests/${TEST_NAME}.c" )
	TARGET_INCLUDE_DIRECTORIES(test_${TEST_NAME} PRIVATE
		${Vulkan_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}/include
		${CMAKE_CURRENT_SOURCE_DIR}/src
		${CMAKE_CURRENT_SOURCE_DIR}/tests/common
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/include
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/src
	)
	TARGET_LINK_LIBRARIES(test_${TEST_NAME}
		tests_common
	)
ENDFUNCTION (buildtest)

if (GLFW3_FOUND)
	ADD_LIBRARY("tests_common" STATIC tests/common/vkengine.c tests/common/test.c)
	TARGET_INCLUDE_DIRECTORIES(tests_common PRIVATE
		${Vulkan_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}/include
		${CMAKE_CURRENT_SOURCE_DIR}/src
		${CMAKE_CURRENT_SOURCE_DIR}/tests/common
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/include
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/src
	)
	TARGET_LINK_LIBRARIES(tests_common
		${Vulkan_LIBRARIES}
		${GLFW3_LIBRARIES}
		vkh_static
		vkvg
	)
	file(GLOB_RECURSE DATAS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/tests" "tests/data/*")
	FOREACH(DATA_FILE ${DATAS})
		GET_FILENAME_COMPONENT(copy-dest-dir ${CMAKE_CURRENT_BINARY_DIR}/${DATA_FILE} DIRECTORY)
		SET(copy-output ${CMAKE_CURRENT_BINARY_DIR}/${DATA_FILE})
		ADD_CUSTOM_COMMAND(
		   OUTPUT  ${copy-output}
		   COMMAND ${CMAKE_COMMAND} -E make_directory ${copy-dest-dir}
		   COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_CURRENT_SOURCE_DIR}/tests/${DATA_FILE}" "${copy-output}"
		   COMMENT "Copying ${DATA_FILE} to ${copy-output}"
		   #DEPENDS ${DATA_FILE}
		   VERBATIM
		)
	ENDFOREACH()
	add_custom_target("${PROJECT_NAME}_DataCopy" ALL DEPENDS ${DATAS})

	#build test apps
	file(GLOB TESTS "tests/*.c")
	FOREACH(TEST ${TESTS})
		GET_FILENAME_COMPONENT(testname ${TEST} NAME_WE)
		buildtest(${testname})
	ENDFOREACH()
endif ()

MESSAGE(STATUS "\n\n--------------------------------------------------------------------------")
	MESSAGE(STATUS "Build type\t\t= ${CMAKE_BUILD_TYPE}")
	MESSAGE(STATUS "VULKAN_SDK\t\t= $ENV{VULKAN_SDK}")
	MESSAGE(STATUS "VK_LAYER_PATH\t= $ENV{VK_LAYER_PATH}")
IF (ENABLE_VALIDATION)
	MESSAGE(STATUS "Validation\t\t= enabled.")
ELSE ()
	MESSAGE(STATUS "Validation\t\t= disabled.")
ENDIF ()
IF (VKVG_PREMULT_ALPHA)
MESSAGE(STATUS "Premult Alpha\t= enabled.")
ELSE ()
MESSAGE(STATUS "Premult Alpha\t= disabled.")
ENDIF ()
IF (VKVG_TILING_OPTIMAL)
MESSAGE(STATUS "Surface tiling\t= VK_IMAGE_TILING_OPTIMAL.")
ELSE ()
MESSAGE(STATUS "Surface tiling\t= VK_IMAGE_TILING_LINEAR.")
ENDIF ()
IF (VKVG_LCD_FONT_FILTER)
MESSAGE(STATUS "Font filtering\t= LCD.")
ELSE ()
MESSAGE(STATUS "Font filtering\t= Grayscale.")
ENDIF ()
MESSAGE(STATUS "---------------------------------------------------------------------------\n\n")

