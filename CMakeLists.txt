CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

SET(LANG "CXX")
SET(CMAKE_CXX_STANDARD 11)

#PROJECT(vkvg VERSION 0.1.1 DESCRIPTION "Vulkan Vector Graphic" LANGUAGES ${LANG})
PROJECT(vkvg VERSION 0.1.1 DESCRIPTION "Vulkan Vector Graphic")

ADD_COMPILE_DEFINITIONS(
	"VKVG_VERSION_MAJOR=${vkvg_VERSION_MAJOR}"
	"VKVG_VERSION_MINOR=${vkvg_VERSION_MINOR}"
	"VKVG_VERSION_REVISION=${vkvg_VERSION_PATCH}"
)

INCLUDE(CheckSymbolExists)
INCLUDE(CheckIncludeFile)
INCLUDE(GNUInstallDirs)
INCLUDE(CMakeDependentOption)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

IF (UNIX)
	SET(LINKER_FLAGS "-lm")
	SET(CMAKE_EXE_LINKER_FLAGS ${LINKER_FLAGS})
	SET(CMAKE_SHARED_LINKER_FLAGS ${LINKER_FLAGS})
ENDIF()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	ADD_DEFINITIONS (-DDEBUG)
	OPTION(ENABLE_VALIDATION "enable vulkan validation layer" ON)
	OPTION(ENABLE_DBG_UTILS "enable VK_EXT_debug_utils extension" ON)
	OPTION(ENABLE_WIRED_FILL "enable wired polygon draw to check vertices and primitives" OFF)
	IF (UNIX)
		SET(CMAKE_${LANG}_FLAGS "-Wall -Wno-extra -Wno-unknown-pragmas -Wno-missing-braces -Wno-unused-variable")
	ELSEIF(MSVC)
		SET(CMAKE_${LANG}_FLAGS "/TC /W4 /wd4201 /wd4204 /wd4221 /wd4100")#c11 complient
	ENDIF()
ELSE()
	UNSET(ENABLE_VALIDATION CACHE)
	UNSET(ENABLE_DBG_UTILS CACHE)
	UNSET(ENABLE_WIRED_FILL CACHE)
	IF (UNIX)
		SET(CMAKE_${LANG}_FLAGS "-w")
	ELSEIF(MSVC)
		SET(CMAKE_${LANG}_FLAGS "/TC /W0")
	ENDIF()
ENDIF()

OPTION(VKVG_PREMULT_ALPHA "use premultiplied alpha for internal rendering" ON)
IF (VKVG_PREMULT_ALPHA)
	ADD_DEFINITIONS (-DVKVG_PREMULT_ALPHA)
ENDIF ()

OPTION(VKVG_DBG_STATS "record contexts statistics in the device" OFF)
IF (VKVG_DBG_STATS)
	ADD_DEFINITIONS (-DVKVG_DBG_STATS)
ENDIF ()


SET(VULKAN_SDK "$ENV{VULKAN_SDK}" CACHE STRING "LunarG Vulkan SDK path")
IF (VULKAN_SDK)
	SET(ENV{VULKAN_SDK} ${VULKAN_SDK})
	SET(vulkanSdkLayerPath "${VULKAN_SDK}/etc/vulkan/explicit_layer.d")
	IF (NOT EXISTS "${vulkanSdkLayerPath}")
		SET(vulkanSdkLayerPath "${VULKAN_SDK}/etc/explicit_layer.d")
	ENDIF ()
	SET(ENV{VK_LAYER_PATH} "${vulkanSdkLayerPath}")
ENDIF ()

IF (NOT TARGET vkh_static)
	ADD_SUBDIRECTORY (vkh)
ENDIF()

#SET(ENABLE_VALIDATION OFF CACHE BOOL "Enable vulkan validation layer")

IF (ENABLE_VALIDATION)
	ADD_DEFINITIONS (-DVKVG_USE_VALIDATION)
	OPTION(ENABLE_RENDERDOC "enable renderdoc" OFF)
	IF (ENABLE_RENDERDOC)
		ADD_DEFINITIONS (-DVKVG_USE_RENDERDOC)
	ENDIF ()
ENDIF ()
IF (ENABLE_WIRED_FILL)
	ADD_DEFINITIONS (-DVKVG_WIRED_DEBUG)
ENDIF ()
IF (ENABLE_DBG_UTILS)
	ADD_DEFINITIONS (-DVKVG_DBG_UTILS)
ENDIF ()


FIND_PACKAGE(Vulkan REQUIRED)
FIND_PACKAGE(Freetype REQUIRED)
FIND_PACKAGE(Fontconfig REQUIRED)
FIND_PACKAGE(HarfBuzz REQUIRED)

FIND_PACKAGE(GLFW3)

CMAKE_DEPENDENT_OPTION(VKVG_BUILD_TESTS "build tests with glfw" ON "GLFW3_FOUND" OFF)

#Freetype lcd font filtering
#CHECK_SYMBOL_EXISTS (FT_CONFIG_OPTION_SUBPIXEL_RENDERING "${FREETYPE_INCLUDE_DIR_freetype2}/freetype/config/ftoption.h" FT_HAS_SUBPIXEL_RENDERING)
#IF (FT_HAS_SUBPIXEL_RENDERING)
	IF (UNIX)
		OPTION(VKVG_LCD_FONT_FILTER "enable freetype lcd font filtering" ON)
	ELSEIF(MSVC)
		OPTION(VKVG_LCD_FONT_FILTER "enable freetype lcd font filtering" OFF)
	ENDIF()
	IF (VKVG_LCD_FONT_FILTER)
		ADD_DEFINITIONS (-DVKVG_LCD_FONT_FILTER)
	ENDIF ()
#ENDIF()

# Find glslc shader compiler.
# On Android, the NDK includes the binary, so no external dependency.
IF(ANDROID)
	FILE(GLOB glslc-folders ${ANDROID_NDK}/shader-tools/*)
ELSE()
	FILE(GLOB glslc-folders ${VULKAN_SDK}/bin)
ENDIF()
FIND_PROGRAM(GLSLC glslc HINTS ${glslc-folders})
FIND_PROGRAM(XXD xxd)

IF(GLSLC AND XXD)
	SET(SHADERS_H "${CMAKE_CURRENT_SOURCE_DIR}/src/shaders.h")
	SET(SHADER_DIR "shaders")
	SET(SHADER_FILES ${SHADER_DIR}/*.frag ${SHADER_DIR}/*.vert ${SHADER_DIR}/*.geom  ${SHADER_DIR}/*.comp)
	FILE(GLOB_RECURSE SHADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${SHADER_FILES})
	FOREACH(SHADER ${SHADERS})
		SET(shader-input ${CMAKE_CURRENT_SOURCE_DIR}/${SHADER})
		SET(shader-output ${CMAKE_CURRENT_BINARY_DIR}/${SHADER}.spv)
		ADD_CUSTOM_COMMAND (
		  OUTPUT ${shader-output}
		  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}"
		  COMMAND ${GLSLC} ${shader-input} -o ${shader-output}
		  COMMENT "Compiling ${shader-input}"
		  DEPENDS ${SHADER}
		  VERBATIM
		)
		SET(SHADER_OUTPUTS ${SHADER_OUTPUTS} ${shader-output})
	ENDFOREACH()

	ADD_CUSTOM_TARGET(BuildShaderHeader ALL DEPENDS ${SHADER_OUTPUTS})

	ADD_CUSTOM_COMMAND (TARGET BuildShaderHeader
		POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E remove ${SHADERS_H}
		VERBATIM
	)

	FOREACH(shad_spv ${SHADER_OUTPUTS})
		GET_FILENAME_COMPONENT(SPV ${shad_spv} NAME)
		ADD_CUSTOM_COMMAND (TARGET BuildShaderHeader
			POST_BUILD
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${SHADER_DIR}
			COMMAND ${XXD} -i ${SPV} >> ${SHADERS_H}
			DEPENDS ${SHADERS_H}
		)
	ENDFOREACH()
	SET_SOURCE_FILES_PROPERTIES(${SHADERS_H} PROPERTIES GENERATED 1)
	#add_definitions( -DDEBUG_VK_PERF=true )
ENDIF()

IF (BuildShaderHeader)
	ADD_DEPENDENCIES(${PROJECT_NAME} BuildShaderHeader)
ENDIF ()

FILE(GLOB VKVG_SRC src/*.c)

CONFIGURE_FILE(vkvg.pc.in vkvg.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/vkvg.pc DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig)

FUNCTION (setup_lib LibName)
	SET_TARGET_PROPERTIES(${LibName} PROPERTIES
			OUTPUT_NAME ${PROJECT_NAME}
			VERSION ${vkvg_VERSION_MAJOR}.${vkvg_VERSION_MINOR}
			SOVERSION ${vkvg_VERSION_MAJOR}
			C_STANDARD 99
			C_EXTENSIONS OFF
			PUBLIC_HEADER "include/vkvg.h;include/vkvg-nsvg.h"
	)

	TARGET_INCLUDE_DIRECTORIES(${LibName} PRIVATE
		${Vulkan_INCLUDE_DIRS}
		${FREETYPE_INCLUDE_DIRS}
		${HarfBuzz_INCLUDE_DIRS}
		${Fontconfig_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}/include
		${CMAKE_CURRENT_SOURCE_DIR}/src
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/include
		${CMAKE_CURRENT_SOURCE_DIR}/vkh/src
	)
	TARGET_LINK_LIBRARIES(${LibName}
		${Vulkan_LIBRARIES}
		${FREETYPE_LIBRARIES}
		${HarfBuzz_LIBRARIES}
		${Fontconfig_LIBRARIES}
		vkh_static
	)
	INSTALL(TARGETS ${LibName}
		LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
		ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
		PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
ENDFUNCTION ()

ADD_LIBRARY("${PROJECT_NAME}_static" STATIC ${VKVG_SRC} ${SHADERS})
target_compile_definitions("${PROJECT_NAME}_static" PUBLIC -DVKVG_STATIC_BUILD)
SET_PROPERTY(TARGET "${PROJECT_NAME}_static" PROPERTY POSITION_INDEPENDENT_CODE OFF)
setup_lib ("${PROJECT_NAME}_static")

ADD_LIBRARY("${PROJECT_NAME}_shared" SHARED ${VKVG_SRC} ${SHADERS})
SET_PROPERTY(TARGET "${PROJECT_NAME}_shared" PROPERTY POSITION_INDEPENDENT_CODE ON)
setup_lib ("${PROJECT_NAME}_shared")

IF (VKVG_BUILD_TESTS)
	ADD_SUBDIRECTORY(tests)
ENDIF (VKVG_BUILD_TESTS)

MESSAGE(STATUS "VKVG version\t\t= ${vkvg_VERSION_MAJOR}.${vkvg_VERSION_MINOR}.${vkvg_VERSION_PATCH}")
IF (VKVG_BUILD_TESTS)
	MESSAGE(STATUS "Build tests\t\t= true.")
ELSE ()
	MESSAGE(STATUS "Build tests\t\t= false.")
ENDIF ()
IF (VKVG_TEST_OFFSCREEN)
	MESSAGE(STATUS "Offscreen\t\t= true.")
ENDIF ()
IF (VKVG_DBG_STATS)
	MESSAGE(STATUS "Debug statistics\t= enabled.")
ELSE ()
	MESSAGE(STATUS "Debug statistics\t= disabled.")
ENDIF ()
IF (ENABLE_DBG_UTILS)
	MESSAGE(STATUS "Debug utils\t\t= enabled.")
ELSE ()
	MESSAGE(STATUS "Debug utils\t\t= disabled.")
ENDIF ()
IF (ENABLE_VALIDATION)
	MESSAGE(STATUS "Validation\t\t= enabled.")
ELSE ()
	MESSAGE(STATUS "Validation\t\t= disabled.")
ENDIF ()
IF (ENABLE_RENDERDOC)
	MESSAGE(STATUS "Renderdoc\t\t= enabled.")
ELSE ()
	MESSAGE(STATUS "Renderdoc\t\t= disabled.")
ENDIF ()
IF (VKVG_PREMULT_ALPHA)
	MESSAGE(STATUS "Premult Alpha\t= enabled.")
ELSE ()
	MESSAGE(STATUS "Premult Alpha\t= disabled.")
ENDIF ()
IF (VKVG_LCD_FONT_FILTER)
	MESSAGE(STATUS "Font filtering\t= LCD.")
ELSE ()
	MESSAGE(STATUS "Font filtering\t= Grayscale.")
ENDIF ()

IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
	INCLUDE(InstallRequiredSystemLibraries)

	set(CPACK_ADD_LDCONFIG_CALL 1)
	SET(CPACK_SET_DESTDIR "on")
	SET(CPACK_PACKAGING_INSTALL_PREFIX "/tmp")
	SET(CPACK_GENERATOR "DEB")

	SET(CPACK_PACKAGE_DESCRIPTION "Vulkan vector graphic library")
	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "2d vector drawing library using vulkan")
	SET(CPACK_PACKAGE_VENDOR "jp Bruyere")
	SET(CPACK_PACKAGE_CONTACT "jp_bruyere@hotmail.com")

	SET(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
	SET(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
	SET(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
	SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
	SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

	#dependencies for this service menu
	SET(CPACK_DEBIAN_PACKAGE_DEPENDS " libharfbuzz-gobject0 , libfontconfig1 , libfreetype6 ")

	SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
	SET(CPACK_DEBIAN_PACKAGE_SECTION "libraries")
	SET(CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})

	SET(CPACK_COMPONENTS_ALL Libraries ApplicationData)


	INCLUDE(CPack)
ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
